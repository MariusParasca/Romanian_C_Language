intreg $valoareIntreaga1;
intreg $valoareIntreaga2;
maiRational $valoareMaiRational1;
intreg @functie1();
intreg $a;
intreg $b;
intreg $c;
intreg $d;
intreg $i;

caracter @functie2();
intreg @functie5();
caracter @functie3(caracter $caracter1, rational $valoareRationala1);
intreg @functie4(caracter $dafsdf);
intreg @functie4(caracter $dafsdf, intreg $dafsdf2);

convoi $string1;
convoi $string2;


constanta intreg $constanta1;
#defineste $definit	23

grup #clasa1
{
accesibil:
	intreg $intreg1DinClasa1;
	rational $rational1DinClasa1;
confidential:
	intreg $intreg2DinClasa1;
accesibil:
	caracter $caracter1DinClasa1;
	intreg @functieDinClasa1();
}

striga(3);

intreg $vector[2];
caracter $sir[3];
intreg $matrice[5][5];

incepem
	$valoareIntreaga1 -> 33;
	$valoareIntreaga2 -> 3 + 5;
	$valoareIntreaga1 -> $valoareIntreaga2 - 6;
	$valoareIntreaga1 -> $valoareIntreaga1 / $valoareIntreaga2;



	striga(7);

	@functie1();

	$a -> 432;
	$b -> 32;
	$c -> 1312;
	$c -> $d;

	daca(($a > $b SAU $a < 3) SAU NEG(($b == $c SI ($a > $b SAU $a < $c)) SAU $a < $c)) 
		$a -> $b;
	

	daca((4 < 5))
	{
		$a -> $a;
		$a -> 2;
		daca((3 > 2)) 
			$c -> $a;
	}
	dacaNu
	{
		$a -> $b;
	}

	catTimp(1 > 2 SI $a > $b) 
	{
		daca(3 > 2) 
			$a -> $c;
		$a -> 2;
	}

	ciclu($i -> 0; $i < 2; $i -> $i + 1)
		$vector[$i] -> $a;

	ciclu($i -> 0; $i < 2; $i -> $i + 1)
	{
		$a -> 2;
	}

	actioneaza
	{
		ciclu($i -> 0; $i < 2; $i -> $i + 1)
			$vector[$i] -> $a;
		
	}catTimp($a < 3);



	lungimeConvoi($sir);
	lungimeConvoi(~adasdsaASfafAFdsAFAS);
	minusculConvoi(~a21212asdasdsAFfsef);
	majusculConvoi(~assdgshq21AASDZDF);

	copieConvoi(~aasdfghgfd,~adfsgdre);
	concatenareConvoi($string1,$string2);
	comparareConvoi(~sae2ea, $string2);

	$a -> NEG($b < 213);
	$b -> ($a > 213) SI (131 == 123);

	$a -> 2 + ($b + 3424 - ($c / $a));

	@functie1($a, 2, 3);
	$a -> @fucntie1($a, 3, @funcite2(2, 3), $a);

	selecteaza ($a)
	{
		caz 1: $a -> 1;
		caz 2: $a -> 2;
		implicit: $a -> 0;
	}

terminam
